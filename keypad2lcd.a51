ORG 0000H

GO_AHEAD:
MOV R0,#40H   //STORE DATA FORM LOCATION
MOV R7,#80H ;THE CURSUR START FROM THIS POSTION 
MOV A,#38H ;init. LCD 2 lines ,5x7 matrix
ACALL COMMAND ;issue command
MOV A,#0EH ;LCD on, cursor on
ACALL COMMAND ;issue command
MOV A,#01H ;cursor: line 1, pos. 6
ACALL COMMAND ;command subroutinE

//READ NUMBER FROM KEYPAD
ACALL KEYPAD //STORE 40H  OPERAND_1

ACALL KEYPAD //STORE 41H  OPERATION

ACALL KEYPAD //STORE 42H OPERAND_2

ACALL KEYPAD  //STORE 43H "="

MOV R0,#43H
CJNE @R0,#'=',GO_PRINT_SYN
MOV R0,#41H
CJNE @R0,#'+',NOT_ADDITION
SUM:
ACALL READ
ADD A,B
ACALL OUT_RES
SJMP CLEAR_LCD

NOT_ADDITION:
CJNE @R0,#'-',NOT_SUBBTRACTION
SUB:
ACALL READ
CLR C
SUBB A,B
JNC POSITIVE 
MOV R6,A
MOV A,#'-'
ACALL DATA_DISPLAY
MOV A,R6
CPL A
INC A
POSITIVE:
ACALL OUT_RES
SJMP CLEAR_LCD

NOT_SUBBTRACTION:
CJNE @R0,#'*',NOT_MUL
MULL:
ACALL READ 
MUL AB
ACALL OUT_RES
SJMP CLEAR_LCD

NOT_MUL:
CJNE @R0,#'/',NOT_VALID_OPERATION
DIVISION:
ACALL READ
MOV R6,B
CJNE R6,#0,VALID_DIVISION
ACALL MATH_ERROR
SJMP CLEAR_LCD
VALID_DIVISION:
DIV AB
ADD A,#30H
ACALL DATA_DISPLAY
MOV A,#'.'
ACALL DATA_DISPLAY
MOV A,#10
MUL AB
MOV B,R6
DIV AB
ADD A,#30H
ACALL DATA_DISPLAY
MOV A,#10
MUL AB
MOV B,R6
DIV AB
ADD A,#30H
ACALL DATA_DISPLAY
SJMP CLEAR_LCD

NOT_VALID_OPERATION:
ACALL OP_MESSAGE
SJMP CLEAR_LCD

movc A,@A+DPTR
GO_PRINT_SYN:
ACALL PRINT_SYN

CLEAR_LCD:
STAY:ACALL KEYPAD
CJNE A,#'N',STAY
LJMP GO_AHEAD

HER: SJMP HER
//THIS POSTION END THE MAIN FUNCTION
//CONVERT ASSCII TO HEXA NUMBERS 
CLEAR_DIGIT:
CJNE A,#'N',S1
MOV A,#10H
ACALL COMMAND
MOV A,#' '
ACALL DATA_DISPLAY
MOV A,#10H
ACALL COMMAND
DEC R0
ACALL KEYPAD
S1:
RET

READ:
MOV A,42H
ANL A,#0FH
MOV B,A
MOV A,40H
ANL A,#0FH
RET
//CONVERT HEXA TO ASSCII
OUT_RES:
MOV B,#10
DIV AB
ADD A,#30H
ACALL DATA_DISPLAY
MOV A,B
ADD A,#30H
ACALL DATA_DISPLAY
RET





KEYPAD:
MOV P1,#00000000B //make poet 1 as output port 
LOOP_AGAIN:MOV P3,#0FFh 
     CLR P3.0 
     JB P3.4,TO_1  
     MOV A,#'1'  
     ACALL LCD_0
	 H0:JNB P3.4,H0	
RET	 
TO_1:JB P3.5,TO_2 
      MOV A,#'2'
      ACALL LCD_0
	  H1:JNB P3.5,H1
RET	  
TO_2:JB P3.6,TO_3
      MOV A,#'3'
      ACALL LCD_0
	  H2:JNB P3.6,H2
RET	  
TO_3:JB P3.7,TO_4
      MOV A,#'+'
      ACALL LCD_0
	  H3:JNB P3.7,H3
RET	  
TO_4:SETB P3.0
      CLR P3.1
      JB P3.4,TO_5
      MOV A,#'4'
      ACALL LCD_0
	  H4:JNB P3.4,H4
RET	  
TO_5:JB P3.5,TO_6
      MOV A,#'5'
      ACALL LCD_0
	  H5:JNB P3.5,H5
RET	  
TO_6:JB P3.6,TO_7
      MOV A,#'6'
      ACALL LCD_0
	  H6:JNB P3.6,H6
RET	  
TO_7:JB P3.7,TO_8
      MOV A,#'-'
      ACALL LCD_0
	  H7:JNB P3.7,H7
RET	  
TO_8:SETB P3.1
      CLR P3.2
      JB P3.4,TO_9
      MOV A,#'7'
      ACALL LCD_0
	  H8:JNB P3.4,H8
RET	  
TO_9:JB P3.5,TO_10
      MOV A,#'8'
      ACALL LCD_0
	  H9:JNB P3.5,H9	
TO_10:JB P3.6,TO_11
       MOV A,#'9'
       ACALL LCD_0
	   H10:JNB P3.6,H10	
RET
TO_11:JB P3.7,TO_12
       MOV A,#'*'
       ACALL LCD_0
	   H11:JNB P3.7,H11
RET	   
TO_12:SETB P3.2
       CLR P3.3
       JB P3.4,TO_13
	   MOV A,#'N'
	   H12:JNB P3.4,H12
RET
TO_13:JB P3.5,TO_14
       MOV A,#'0'
       ACALL LCD_0
	   H13:JNB P3.5,H13
RET	   
TO_14:JB P3.6,TO_15
       MOV A,#'='
       ACALL LCD_0
	   H14:JNB P3.6,H14
RET	   
TO_15:JB P3.7,TO_FINAL
       MOV A,#'/'
       ACALL LCD_0
	   H15:JNB P3.7,H15
RET
TO_FINAL:   LJMP  LOOP_AGAIN





LCD_0:
MOV @R0,A
ACALL DATA_DISPLAY
INC R0
INC R7  ;INCREMENT CURSOR POSITION 
CJNE R7,#090H,LINE_1
LINE_2:
MOV R7,#0C0H
MOV A,R7
SJMP GO
LINE_1:
MOV A,R7 ;clear LCD command
GO:
ACALL COMMAND ;issue command
ACALL DELAY_LONG

RET

COMMAND:
ACALL DELAY ;is LCD ready?
MOV P1,A ;issue command code
CLR P2.0 ;RS=0 for command
SETB P2.1 ;E=1 for H-to-L pulse
CLR P2.1 ;E=0,latch in
RET
DATA_DISPLAY:
ACALL DELAY ;is LCD ready?
MOV P1,A ;issue data
SETB P2.0 ;RS=1 for data
SETB P2.1 ;E=1 for H-to-L pulse
CLR P2.1 ;E=0,latch in
RET
DELAY:
mov R2,#0FFH   
L1:mov R3,#0FFH
L2:DJNZ R3,L2
DJNZ R2,L1
RET


DELAY_LONG:
	MOV R2,#10
L33:MOV R3,#100
L22:MOV R4,#100
L11:DJNZ R4,L11
	DJNZ R3,L22
	DJNZ R2,L33
RET


PRINT_SYN:
MOV R7,#80H
MOV DPTR,#SYNTAX_NOT_VALID
AGAIN_0:
MOV A,R7
ACALL COMMAND 
CLR A
MOVC A,@A+DPTR
JZ SKIP_1
ACALL  DATA_DISPLAY
INC R7
INC DPTR
SJMP AGAIN_0
SKIP_1:
MOV R7,#0C0H
MOV DPTR,#CORRECT_SYNTAX
AGAIN_1:
MOV A,R7
ACALL COMMAND 
CLR A
MOVC A,@A+DPTR
JZ SKIP_2
ACALL  DATA_DISPLAY
INC R7
INC DPTR
SJMP AGAIN_1
SKIP_2:
RET

MATH_ERROR:
MOV DPTR,#DIVISION_ZERO
MOV R7,#80H
AGAIN_2:
MOV A,R7
ACALL COMMAND
CLR A
MOVC A,@A+DPTR
JZ SKIP_3
ACALL DATA_DISPLAY
INC R7
INC DPTR
SJMP AGAIN_2
SKIP_3:
RET

OP_MESSAGE:
MOV DPTR,#NOT_OPERATION
MOV R7,#80H
AGAIN_3:
MOV A,R7
ACALL COMMAND
CLR A
MOVC A,@A+DPTR
JZ SKIP_4
ACALL DATA_DISPLAY
INC R7
INC DPTR
SJMP AGAIN_3
SKIP_4:
RET


SYNTAX_NOT_VALID:
      DB "SYNTAX ERROR",0
CORRECT_SYNTAX:
      DB "A+B=RESULT",0
DIVISION_ZERO:
	 DB "MATH ERROR",0
NOT_OPERATION:
     DB  "NOT VALID OPERATION",0

END